import re
from pathlib import Path

from .image_ops import calculate_tumor_frac, get_size


def extract_slide_info(slide_folder_path: Path) -> list:
    """Extract slide information from slide folder name."""
    column_names = [
        "category",
        "slide_name",
        "downsample_rate",
        "img_size",
        "overlap_ratio_per_tile",
        "only_annotated_tiles",
        "allow_partial_tiles",
        "tile_count",
        "mask_count",
    ]

    split_folder_name = slide_folder_path.name.split("|")

    tile_count = len([*(slide_folder_path / "images").iterdir()])
    mask_count = len([*(slide_folder_path / "masks").iterdir()])
    slide_info = dict(zip(column_names, split_folder_name + [tile_count, mask_count]))

    return slide_info


def extract_location_info(filename: str) -> dict:
    """Extract tile location information from tile file name generated by QuPath."""
    match = re.search(r"d=([\d.]+).*x=(\d+).*y=(\d+).*w=(\d+).*h=(\d+)", filename)
    if match:
        assert match.group(4) == match.group(5)
        return {
            "downsample_rate": float(match.group(1)),
            "x": match.group(2),
            "y": match.group(3),
            "size_on_slide": match.group(4),
        }
    return {}


def extract_tile_info(source: Path, suffix: str = "label", ext: str = "png") -> list:
    """Extract tile & mask information from file name and mask."""
    tile_info_entries = []
    for item in (source / "images").iterdir():
        if item.is_file():
            slide_dir_path = source
            mask_name = f"{item.stem}_{suffix}.{ext}"

            entry = {
                "slide_name": str(slide_dir_path.name),
                "parent_dir_path": str(
                    slide_dir_path.relative_to(source.parent.parent)
                ),
                "relative_image_path": str(item.relative_to(slide_dir_path)),
                "relative_mask_path": str(Path("masks") / mask_name),
            }

            full_mask_path = slide_dir_path / entry["relative_mask_path"]
            entry["tumor_frac"] = str(calculate_tumor_frac(full_mask_path))
            entry["image_size"] = str(get_size(item))

            entry = entry | extract_location_info(item.name)
            tile_info_entries.append(entry)

    return tile_info_entries
